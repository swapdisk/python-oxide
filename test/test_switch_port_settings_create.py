# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from oxide.models.switch_port_settings_create import SwitchPortSettingsCreate

class TestSwitchPortSettingsCreate(unittest.TestCase):
    """SwitchPortSettingsCreate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SwitchPortSettingsCreate:
        """Test SwitchPortSettingsCreate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SwitchPortSettingsCreate`
        """
        model = SwitchPortSettingsCreate()
        if include_optional:
            return SwitchPortSettingsCreate(
                addresses = {
                    'key' : oxide.models.address_config.AddressConfig(
                        addresses = [
                            oxide.models.address.Address(
                                address = null, 
                                address_lot = null, 
                                vlan_id = 0, )
                            ], )
                    },
                bgp_peers = {
                    'key' : oxide.models.bgp_peer_config.BgpPeerConfig(
                        peers = [
                            oxide.models.bgp_peer.BgpPeer(
                                addr = '', 
                                allowed_export = null, 
                                allowed_import = null, 
                                bgp_config = null, 
                                communities = [
                                    0
                                    ], 
                                connect_retry = 0, 
                                delay_open = 0, 
                                enforce_first_as = True, 
                                hold_time = 0, 
                                idle_hold_time = 0, 
                                interface_name = '', 
                                keepalive = 0, 
                                local_pref = 0, 
                                md5_auth_key = '', 
                                min_ttl = 0, 
                                multi_exit_discriminator = 0, 
                                remote_asn = 0, 
                                vlan_id = 0, )
                            ], )
                    },
                description = '',
                groups = [
                    null
                    ],
                interfaces = {
                    'key' : oxide.models.switch_interface_config_create.SwitchInterfaceConfigCreate(
                        kind = null, 
                        v6_enabled = True, )
                    },
                links = {
                    'key' : oxide.models.link_config_create.LinkConfigCreate(
                        autoneg = True, 
                        fec = null, 
                        lldp = null, 
                        mtu = 0, 
                        speed = null, )
                    },
                name = ERROR_TO_EXAMPLE_VALUE,
                port_config = oxide.models.switch_port_config_create.SwitchPortConfigCreate(
                    geometry = null, ),
                routes = {
                    'key' : oxide.models.route_config.RouteConfig(
                        routes = [
                            oxide.models.route.Route(
                                dst = null, 
                                gw = '', 
                                local_pref = 0, 
                                vid = 0, )
                            ], )
                    }
            )
        else:
            return SwitchPortSettingsCreate(
                addresses = {
                    'key' : oxide.models.address_config.AddressConfig(
                        addresses = [
                            oxide.models.address.Address(
                                address = null, 
                                address_lot = null, 
                                vlan_id = 0, )
                            ], )
                    },
                bgp_peers = {
                    'key' : oxide.models.bgp_peer_config.BgpPeerConfig(
                        peers = [
                            oxide.models.bgp_peer.BgpPeer(
                                addr = '', 
                                allowed_export = null, 
                                allowed_import = null, 
                                bgp_config = null, 
                                communities = [
                                    0
                                    ], 
                                connect_retry = 0, 
                                delay_open = 0, 
                                enforce_first_as = True, 
                                hold_time = 0, 
                                idle_hold_time = 0, 
                                interface_name = '', 
                                keepalive = 0, 
                                local_pref = 0, 
                                md5_auth_key = '', 
                                min_ttl = 0, 
                                multi_exit_discriminator = 0, 
                                remote_asn = 0, 
                                vlan_id = 0, )
                            ], )
                    },
                description = '',
                groups = [
                    null
                    ],
                interfaces = {
                    'key' : oxide.models.switch_interface_config_create.SwitchInterfaceConfigCreate(
                        kind = null, 
                        v6_enabled = True, )
                    },
                links = {
                    'key' : oxide.models.link_config_create.LinkConfigCreate(
                        autoneg = True, 
                        fec = null, 
                        lldp = null, 
                        mtu = 0, 
                        speed = null, )
                    },
                name = ERROR_TO_EXAMPLE_VALUE,
                port_config = oxide.models.switch_port_config_create.SwitchPortConfigCreate(
                    geometry = null, ),
                routes = {
                    'key' : oxide.models.route_config.RouteConfig(
                        routes = [
                            oxide.models.route.Route(
                                dst = null, 
                                gw = '', 
                                local_pref = 0, 
                                vid = 0, )
                            ], )
                    },
        )
        """

    def testSwitchPortSettingsCreate(self):
        """Test SwitchPortSettingsCreate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
