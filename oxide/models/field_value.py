# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from oxide.models.field_value_one_of import FieldValueOneOf
from oxide.models.field_value_one_of1 import FieldValueOneOf1
from oxide.models.field_value_one_of10 import FieldValueOneOf10
from oxide.models.field_value_one_of11 import FieldValueOneOf11
from oxide.models.field_value_one_of2 import FieldValueOneOf2
from oxide.models.field_value_one_of3 import FieldValueOneOf3
from oxide.models.field_value_one_of4 import FieldValueOneOf4
from oxide.models.field_value_one_of5 import FieldValueOneOf5
from oxide.models.field_value_one_of6 import FieldValueOneOf6
from oxide.models.field_value_one_of7 import FieldValueOneOf7
from oxide.models.field_value_one_of8 import FieldValueOneOf8
from oxide.models.field_value_one_of9 import FieldValueOneOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

FIELDVALUE_ONE_OF_SCHEMAS = ["FieldValueOneOf", "FieldValueOneOf1", "FieldValueOneOf10", "FieldValueOneOf11", "FieldValueOneOf2", "FieldValueOneOf3", "FieldValueOneOf4", "FieldValueOneOf5", "FieldValueOneOf6", "FieldValueOneOf7", "FieldValueOneOf8", "FieldValueOneOf9"]

class FieldValue(BaseModel):
    """
    The `FieldValue` contains the value of a target or metric field.
    """
    # data type: FieldValueOneOf
    oneof_schema_1_validator: Optional[FieldValueOneOf] = None
    # data type: FieldValueOneOf1
    oneof_schema_2_validator: Optional[FieldValueOneOf1] = None
    # data type: FieldValueOneOf2
    oneof_schema_3_validator: Optional[FieldValueOneOf2] = None
    # data type: FieldValueOneOf3
    oneof_schema_4_validator: Optional[FieldValueOneOf3] = None
    # data type: FieldValueOneOf4
    oneof_schema_5_validator: Optional[FieldValueOneOf4] = None
    # data type: FieldValueOneOf5
    oneof_schema_6_validator: Optional[FieldValueOneOf5] = None
    # data type: FieldValueOneOf6
    oneof_schema_7_validator: Optional[FieldValueOneOf6] = None
    # data type: FieldValueOneOf7
    oneof_schema_8_validator: Optional[FieldValueOneOf7] = None
    # data type: FieldValueOneOf8
    oneof_schema_9_validator: Optional[FieldValueOneOf8] = None
    # data type: FieldValueOneOf9
    oneof_schema_10_validator: Optional[FieldValueOneOf9] = None
    # data type: FieldValueOneOf10
    oneof_schema_11_validator: Optional[FieldValueOneOf10] = None
    # data type: FieldValueOneOf11
    oneof_schema_12_validator: Optional[FieldValueOneOf11] = None
    actual_instance: Optional[Union[FieldValueOneOf, FieldValueOneOf1, FieldValueOneOf10, FieldValueOneOf11, FieldValueOneOf2, FieldValueOneOf3, FieldValueOneOf4, FieldValueOneOf5, FieldValueOneOf6, FieldValueOneOf7, FieldValueOneOf8, FieldValueOneOf9]] = None
    one_of_schemas: Set[str] = { "FieldValueOneOf", "FieldValueOneOf1", "FieldValueOneOf10", "FieldValueOneOf11", "FieldValueOneOf2", "FieldValueOneOf3", "FieldValueOneOf4", "FieldValueOneOf5", "FieldValueOneOf6", "FieldValueOneOf7", "FieldValueOneOf8", "FieldValueOneOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = FieldValue.model_construct()
        error_messages = []
        match = 0
        # validate data type: FieldValueOneOf
        if not isinstance(v, FieldValueOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf`")
        else:
            match += 1
        # validate data type: FieldValueOneOf1
        if not isinstance(v, FieldValueOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf1`")
        else:
            match += 1
        # validate data type: FieldValueOneOf2
        if not isinstance(v, FieldValueOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf2`")
        else:
            match += 1
        # validate data type: FieldValueOneOf3
        if not isinstance(v, FieldValueOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf3`")
        else:
            match += 1
        # validate data type: FieldValueOneOf4
        if not isinstance(v, FieldValueOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf4`")
        else:
            match += 1
        # validate data type: FieldValueOneOf5
        if not isinstance(v, FieldValueOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf5`")
        else:
            match += 1
        # validate data type: FieldValueOneOf6
        if not isinstance(v, FieldValueOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf6`")
        else:
            match += 1
        # validate data type: FieldValueOneOf7
        if not isinstance(v, FieldValueOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf7`")
        else:
            match += 1
        # validate data type: FieldValueOneOf8
        if not isinstance(v, FieldValueOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf8`")
        else:
            match += 1
        # validate data type: FieldValueOneOf9
        if not isinstance(v, FieldValueOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf9`")
        else:
            match += 1
        # validate data type: FieldValueOneOf10
        if not isinstance(v, FieldValueOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf10`")
        else:
            match += 1
        # validate data type: FieldValueOneOf11
        if not isinstance(v, FieldValueOneOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FieldValueOneOf11`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in FieldValue with oneOf schemas: FieldValueOneOf, FieldValueOneOf1, FieldValueOneOf10, FieldValueOneOf11, FieldValueOneOf2, FieldValueOneOf3, FieldValueOneOf4, FieldValueOneOf5, FieldValueOneOf6, FieldValueOneOf7, FieldValueOneOf8, FieldValueOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in FieldValue with oneOf schemas: FieldValueOneOf, FieldValueOneOf1, FieldValueOneOf10, FieldValueOneOf11, FieldValueOneOf2, FieldValueOneOf3, FieldValueOneOf4, FieldValueOneOf5, FieldValueOneOf6, FieldValueOneOf7, FieldValueOneOf8, FieldValueOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into FieldValueOneOf
        try:
            instance.actual_instance = FieldValueOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf1
        try:
            instance.actual_instance = FieldValueOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf2
        try:
            instance.actual_instance = FieldValueOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf3
        try:
            instance.actual_instance = FieldValueOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf4
        try:
            instance.actual_instance = FieldValueOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf5
        try:
            instance.actual_instance = FieldValueOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf6
        try:
            instance.actual_instance = FieldValueOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf7
        try:
            instance.actual_instance = FieldValueOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf8
        try:
            instance.actual_instance = FieldValueOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf9
        try:
            instance.actual_instance = FieldValueOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf10
        try:
            instance.actual_instance = FieldValueOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FieldValueOneOf11
        try:
            instance.actual_instance = FieldValueOneOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into FieldValue with oneOf schemas: FieldValueOneOf, FieldValueOneOf1, FieldValueOneOf10, FieldValueOneOf11, FieldValueOneOf2, FieldValueOneOf3, FieldValueOneOf4, FieldValueOneOf5, FieldValueOneOf6, FieldValueOneOf7, FieldValueOneOf8, FieldValueOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FieldValue with oneOf schemas: FieldValueOneOf, FieldValueOneOf1, FieldValueOneOf10, FieldValueOneOf11, FieldValueOneOf2, FieldValueOneOf3, FieldValueOneOf4, FieldValueOneOf5, FieldValueOneOf6, FieldValueOneOf7, FieldValueOneOf8, FieldValueOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], FieldValueOneOf, FieldValueOneOf1, FieldValueOneOf10, FieldValueOneOf11, FieldValueOneOf2, FieldValueOneOf3, FieldValueOneOf4, FieldValueOneOf5, FieldValueOneOf6, FieldValueOneOf7, FieldValueOneOf8, FieldValueOneOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


