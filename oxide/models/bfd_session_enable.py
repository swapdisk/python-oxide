# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from oxide.models.bfd_mode import BfdMode
from typing import Optional, Set
from typing_extensions import Self

class BfdSessionEnable(BaseModel):
    """
    Information about a bidirectional forwarding detection (BFD) session.
    """ # noqa: E501
    detection_threshold: Annotated[int, Field(strict=True, ge=0)] = Field(description="The negotiated Control packet transmission interval, multiplied by this variable, will be the Detection Time for this session (as seen by the remote system)")
    local: Optional[StrictStr] = Field(default=None, description="Address the Oxide switch will listen on for BFD traffic. If `None` then the unspecified address (0.0.0.0 or ::) is used.")
    mode: BfdMode = Field(description="Select either single-hop (RFC 5881) or multi-hop (RFC 5883)")
    remote: StrictStr = Field(description="Address of the remote peer to establish a BFD session with.")
    required_rx: Annotated[int, Field(strict=True, ge=0)] = Field(description="The minimum interval, in microseconds, between received BFD Control packets that this system requires")
    switch: Annotated[str, Field(min_length=1, strict=True, max_length=63)] = Field(description="The switch to enable this session on. Must be `switch0` or `switch1`.")
    __properties: ClassVar[List[str]] = ["detection_threshold", "local", "mode", "remote", "required_rx", "switch"]

    @field_validator('switch')
    def switch_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$", value):
            raise ValueError(r"must validate the regular expression /^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BfdSessionEnable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if local (nullable) is None
        # and model_fields_set contains the field
        if self.local is None and "local" in self.model_fields_set:
            _dict['local'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BfdSessionEnable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detection_threshold": obj.get("detection_threshold"),
            "local": obj.get("local"),
            "mode": obj.get("mode"),
            "remote": obj.get("remote"),
            "required_rx": obj.get("required_rx"),
            "switch": obj.get("switch")
        })
        return _obj


