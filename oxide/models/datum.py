# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from oxide.models.datum_one_of import DatumOneOf
from oxide.models.datum_one_of1 import DatumOneOf1
from oxide.models.datum_one_of10 import DatumOneOf10
from oxide.models.datum_one_of11 import DatumOneOf11
from oxide.models.datum_one_of12 import DatumOneOf12
from oxide.models.datum_one_of13 import DatumOneOf13
from oxide.models.datum_one_of14 import DatumOneOf14
from oxide.models.datum_one_of15 import DatumOneOf15
from oxide.models.datum_one_of16 import DatumOneOf16
from oxide.models.datum_one_of17 import DatumOneOf17
from oxide.models.datum_one_of18 import DatumOneOf18
from oxide.models.datum_one_of19 import DatumOneOf19
from oxide.models.datum_one_of2 import DatumOneOf2
from oxide.models.datum_one_of20 import DatumOneOf20
from oxide.models.datum_one_of21 import DatumOneOf21
from oxide.models.datum_one_of22 import DatumOneOf22
from oxide.models.datum_one_of23 import DatumOneOf23
from oxide.models.datum_one_of24 import DatumOneOf24
from oxide.models.datum_one_of25 import DatumOneOf25
from oxide.models.datum_one_of26 import DatumOneOf26
from oxide.models.datum_one_of27 import DatumOneOf27
from oxide.models.datum_one_of3 import DatumOneOf3
from oxide.models.datum_one_of4 import DatumOneOf4
from oxide.models.datum_one_of5 import DatumOneOf5
from oxide.models.datum_one_of6 import DatumOneOf6
from oxide.models.datum_one_of7 import DatumOneOf7
from oxide.models.datum_one_of8 import DatumOneOf8
from oxide.models.datum_one_of9 import DatumOneOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DATUM_ONE_OF_SCHEMAS = ["DatumOneOf", "DatumOneOf1", "DatumOneOf10", "DatumOneOf11", "DatumOneOf12", "DatumOneOf13", "DatumOneOf14", "DatumOneOf15", "DatumOneOf16", "DatumOneOf17", "DatumOneOf18", "DatumOneOf19", "DatumOneOf2", "DatumOneOf20", "DatumOneOf21", "DatumOneOf22", "DatumOneOf23", "DatumOneOf24", "DatumOneOf25", "DatumOneOf26", "DatumOneOf27", "DatumOneOf3", "DatumOneOf4", "DatumOneOf5", "DatumOneOf6", "DatumOneOf7", "DatumOneOf8", "DatumOneOf9"]

class Datum(BaseModel):
    """
    A `Datum` is a single sampled data point from a metric.
    """
    # data type: DatumOneOf
    oneof_schema_1_validator: Optional[DatumOneOf] = None
    # data type: DatumOneOf1
    oneof_schema_2_validator: Optional[DatumOneOf1] = None
    # data type: DatumOneOf2
    oneof_schema_3_validator: Optional[DatumOneOf2] = None
    # data type: DatumOneOf3
    oneof_schema_4_validator: Optional[DatumOneOf3] = None
    # data type: DatumOneOf4
    oneof_schema_5_validator: Optional[DatumOneOf4] = None
    # data type: DatumOneOf5
    oneof_schema_6_validator: Optional[DatumOneOf5] = None
    # data type: DatumOneOf6
    oneof_schema_7_validator: Optional[DatumOneOf6] = None
    # data type: DatumOneOf7
    oneof_schema_8_validator: Optional[DatumOneOf7] = None
    # data type: DatumOneOf8
    oneof_schema_9_validator: Optional[DatumOneOf8] = None
    # data type: DatumOneOf9
    oneof_schema_10_validator: Optional[DatumOneOf9] = None
    # data type: DatumOneOf10
    oneof_schema_11_validator: Optional[DatumOneOf10] = None
    # data type: DatumOneOf11
    oneof_schema_12_validator: Optional[DatumOneOf11] = None
    # data type: DatumOneOf12
    oneof_schema_13_validator: Optional[DatumOneOf12] = None
    # data type: DatumOneOf13
    oneof_schema_14_validator: Optional[DatumOneOf13] = None
    # data type: DatumOneOf14
    oneof_schema_15_validator: Optional[DatumOneOf14] = None
    # data type: DatumOneOf15
    oneof_schema_16_validator: Optional[DatumOneOf15] = None
    # data type: DatumOneOf16
    oneof_schema_17_validator: Optional[DatumOneOf16] = None
    # data type: DatumOneOf17
    oneof_schema_18_validator: Optional[DatumOneOf17] = None
    # data type: DatumOneOf18
    oneof_schema_19_validator: Optional[DatumOneOf18] = None
    # data type: DatumOneOf19
    oneof_schema_20_validator: Optional[DatumOneOf19] = None
    # data type: DatumOneOf20
    oneof_schema_21_validator: Optional[DatumOneOf20] = None
    # data type: DatumOneOf21
    oneof_schema_22_validator: Optional[DatumOneOf21] = None
    # data type: DatumOneOf22
    oneof_schema_23_validator: Optional[DatumOneOf22] = None
    # data type: DatumOneOf23
    oneof_schema_24_validator: Optional[DatumOneOf23] = None
    # data type: DatumOneOf24
    oneof_schema_25_validator: Optional[DatumOneOf24] = None
    # data type: DatumOneOf25
    oneof_schema_26_validator: Optional[DatumOneOf25] = None
    # data type: DatumOneOf26
    oneof_schema_27_validator: Optional[DatumOneOf26] = None
    # data type: DatumOneOf27
    oneof_schema_28_validator: Optional[DatumOneOf27] = None
    actual_instance: Optional[Union[DatumOneOf, DatumOneOf1, DatumOneOf10, DatumOneOf11, DatumOneOf12, DatumOneOf13, DatumOneOf14, DatumOneOf15, DatumOneOf16, DatumOneOf17, DatumOneOf18, DatumOneOf19, DatumOneOf2, DatumOneOf20, DatumOneOf21, DatumOneOf22, DatumOneOf23, DatumOneOf24, DatumOneOf25, DatumOneOf26, DatumOneOf27, DatumOneOf3, DatumOneOf4, DatumOneOf5, DatumOneOf6, DatumOneOf7, DatumOneOf8, DatumOneOf9]] = None
    one_of_schemas: Set[str] = { "DatumOneOf", "DatumOneOf1", "DatumOneOf10", "DatumOneOf11", "DatumOneOf12", "DatumOneOf13", "DatumOneOf14", "DatumOneOf15", "DatumOneOf16", "DatumOneOf17", "DatumOneOf18", "DatumOneOf19", "DatumOneOf2", "DatumOneOf20", "DatumOneOf21", "DatumOneOf22", "DatumOneOf23", "DatumOneOf24", "DatumOneOf25", "DatumOneOf26", "DatumOneOf27", "DatumOneOf3", "DatumOneOf4", "DatumOneOf5", "DatumOneOf6", "DatumOneOf7", "DatumOneOf8", "DatumOneOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Datum.model_construct()
        error_messages = []
        match = 0
        # validate data type: DatumOneOf
        if not isinstance(v, DatumOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf`")
        else:
            match += 1
        # validate data type: DatumOneOf1
        if not isinstance(v, DatumOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf1`")
        else:
            match += 1
        # validate data type: DatumOneOf2
        if not isinstance(v, DatumOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf2`")
        else:
            match += 1
        # validate data type: DatumOneOf3
        if not isinstance(v, DatumOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf3`")
        else:
            match += 1
        # validate data type: DatumOneOf4
        if not isinstance(v, DatumOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf4`")
        else:
            match += 1
        # validate data type: DatumOneOf5
        if not isinstance(v, DatumOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf5`")
        else:
            match += 1
        # validate data type: DatumOneOf6
        if not isinstance(v, DatumOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf6`")
        else:
            match += 1
        # validate data type: DatumOneOf7
        if not isinstance(v, DatumOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf7`")
        else:
            match += 1
        # validate data type: DatumOneOf8
        if not isinstance(v, DatumOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf8`")
        else:
            match += 1
        # validate data type: DatumOneOf9
        if not isinstance(v, DatumOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf9`")
        else:
            match += 1
        # validate data type: DatumOneOf10
        if not isinstance(v, DatumOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf10`")
        else:
            match += 1
        # validate data type: DatumOneOf11
        if not isinstance(v, DatumOneOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf11`")
        else:
            match += 1
        # validate data type: DatumOneOf12
        if not isinstance(v, DatumOneOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf12`")
        else:
            match += 1
        # validate data type: DatumOneOf13
        if not isinstance(v, DatumOneOf13):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf13`")
        else:
            match += 1
        # validate data type: DatumOneOf14
        if not isinstance(v, DatumOneOf14):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf14`")
        else:
            match += 1
        # validate data type: DatumOneOf15
        if not isinstance(v, DatumOneOf15):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf15`")
        else:
            match += 1
        # validate data type: DatumOneOf16
        if not isinstance(v, DatumOneOf16):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf16`")
        else:
            match += 1
        # validate data type: DatumOneOf17
        if not isinstance(v, DatumOneOf17):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf17`")
        else:
            match += 1
        # validate data type: DatumOneOf18
        if not isinstance(v, DatumOneOf18):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf18`")
        else:
            match += 1
        # validate data type: DatumOneOf19
        if not isinstance(v, DatumOneOf19):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf19`")
        else:
            match += 1
        # validate data type: DatumOneOf20
        if not isinstance(v, DatumOneOf20):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf20`")
        else:
            match += 1
        # validate data type: DatumOneOf21
        if not isinstance(v, DatumOneOf21):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf21`")
        else:
            match += 1
        # validate data type: DatumOneOf22
        if not isinstance(v, DatumOneOf22):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf22`")
        else:
            match += 1
        # validate data type: DatumOneOf23
        if not isinstance(v, DatumOneOf23):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf23`")
        else:
            match += 1
        # validate data type: DatumOneOf24
        if not isinstance(v, DatumOneOf24):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf24`")
        else:
            match += 1
        # validate data type: DatumOneOf25
        if not isinstance(v, DatumOneOf25):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf25`")
        else:
            match += 1
        # validate data type: DatumOneOf26
        if not isinstance(v, DatumOneOf26):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf26`")
        else:
            match += 1
        # validate data type: DatumOneOf27
        if not isinstance(v, DatumOneOf27):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DatumOneOf27`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Datum with oneOf schemas: DatumOneOf, DatumOneOf1, DatumOneOf10, DatumOneOf11, DatumOneOf12, DatumOneOf13, DatumOneOf14, DatumOneOf15, DatumOneOf16, DatumOneOf17, DatumOneOf18, DatumOneOf19, DatumOneOf2, DatumOneOf20, DatumOneOf21, DatumOneOf22, DatumOneOf23, DatumOneOf24, DatumOneOf25, DatumOneOf26, DatumOneOf27, DatumOneOf3, DatumOneOf4, DatumOneOf5, DatumOneOf6, DatumOneOf7, DatumOneOf8, DatumOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Datum with oneOf schemas: DatumOneOf, DatumOneOf1, DatumOneOf10, DatumOneOf11, DatumOneOf12, DatumOneOf13, DatumOneOf14, DatumOneOf15, DatumOneOf16, DatumOneOf17, DatumOneOf18, DatumOneOf19, DatumOneOf2, DatumOneOf20, DatumOneOf21, DatumOneOf22, DatumOneOf23, DatumOneOf24, DatumOneOf25, DatumOneOf26, DatumOneOf27, DatumOneOf3, DatumOneOf4, DatumOneOf5, DatumOneOf6, DatumOneOf7, DatumOneOf8, DatumOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DatumOneOf
        try:
            instance.actual_instance = DatumOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf1
        try:
            instance.actual_instance = DatumOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf2
        try:
            instance.actual_instance = DatumOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf3
        try:
            instance.actual_instance = DatumOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf4
        try:
            instance.actual_instance = DatumOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf5
        try:
            instance.actual_instance = DatumOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf6
        try:
            instance.actual_instance = DatumOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf7
        try:
            instance.actual_instance = DatumOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf8
        try:
            instance.actual_instance = DatumOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf9
        try:
            instance.actual_instance = DatumOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf10
        try:
            instance.actual_instance = DatumOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf11
        try:
            instance.actual_instance = DatumOneOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf12
        try:
            instance.actual_instance = DatumOneOf12.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf13
        try:
            instance.actual_instance = DatumOneOf13.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf14
        try:
            instance.actual_instance = DatumOneOf14.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf15
        try:
            instance.actual_instance = DatumOneOf15.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf16
        try:
            instance.actual_instance = DatumOneOf16.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf17
        try:
            instance.actual_instance = DatumOneOf17.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf18
        try:
            instance.actual_instance = DatumOneOf18.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf19
        try:
            instance.actual_instance = DatumOneOf19.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf20
        try:
            instance.actual_instance = DatumOneOf20.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf21
        try:
            instance.actual_instance = DatumOneOf21.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf22
        try:
            instance.actual_instance = DatumOneOf22.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf23
        try:
            instance.actual_instance = DatumOneOf23.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf24
        try:
            instance.actual_instance = DatumOneOf24.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf25
        try:
            instance.actual_instance = DatumOneOf25.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf26
        try:
            instance.actual_instance = DatumOneOf26.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DatumOneOf27
        try:
            instance.actual_instance = DatumOneOf27.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Datum with oneOf schemas: DatumOneOf, DatumOneOf1, DatumOneOf10, DatumOneOf11, DatumOneOf12, DatumOneOf13, DatumOneOf14, DatumOneOf15, DatumOneOf16, DatumOneOf17, DatumOneOf18, DatumOneOf19, DatumOneOf2, DatumOneOf20, DatumOneOf21, DatumOneOf22, DatumOneOf23, DatumOneOf24, DatumOneOf25, DatumOneOf26, DatumOneOf27, DatumOneOf3, DatumOneOf4, DatumOneOf5, DatumOneOf6, DatumOneOf7, DatumOneOf8, DatumOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Datum with oneOf schemas: DatumOneOf, DatumOneOf1, DatumOneOf10, DatumOneOf11, DatumOneOf12, DatumOneOf13, DatumOneOf14, DatumOneOf15, DatumOneOf16, DatumOneOf17, DatumOneOf18, DatumOneOf19, DatumOneOf2, DatumOneOf20, DatumOneOf21, DatumOneOf22, DatumOneOf23, DatumOneOf24, DatumOneOf25, DatumOneOf26, DatumOneOf27, DatumOneOf3, DatumOneOf4, DatumOneOf5, DatumOneOf6, DatumOneOf7, DatumOneOf8, DatumOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DatumOneOf, DatumOneOf1, DatumOneOf10, DatumOneOf11, DatumOneOf12, DatumOneOf13, DatumOneOf14, DatumOneOf15, DatumOneOf16, DatumOneOf17, DatumOneOf18, DatumOneOf19, DatumOneOf2, DatumOneOf20, DatumOneOf21, DatumOneOf22, DatumOneOf23, DatumOneOf24, DatumOneOf25, DatumOneOf26, DatumOneOf27, DatumOneOf3, DatumOneOf4, DatumOneOf5, DatumOneOf6, DatumOneOf7, DatumOneOf8, DatumOneOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


