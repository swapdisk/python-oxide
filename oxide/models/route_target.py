# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from oxide.models.route_target_one_of import RouteTargetOneOf
from oxide.models.route_target_one_of1 import RouteTargetOneOf1
from oxide.models.route_target_one_of2 import RouteTargetOneOf2
from oxide.models.route_target_one_of3 import RouteTargetOneOf3
from oxide.models.route_target_one_of4 import RouteTargetOneOf4
from oxide.models.route_target_one_of5 import RouteTargetOneOf5
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ROUTETARGET_ONE_OF_SCHEMAS = ["RouteTargetOneOf", "RouteTargetOneOf1", "RouteTargetOneOf2", "RouteTargetOneOf3", "RouteTargetOneOf4", "RouteTargetOneOf5"]

class RouteTarget(BaseModel):
    """
    A `RouteTarget` describes the possible locations that traffic matching a route destination can be sent.
    """
    # data type: RouteTargetOneOf
    oneof_schema_1_validator: Optional[RouteTargetOneOf] = None
    # data type: RouteTargetOneOf1
    oneof_schema_2_validator: Optional[RouteTargetOneOf1] = None
    # data type: RouteTargetOneOf2
    oneof_schema_3_validator: Optional[RouteTargetOneOf2] = None
    # data type: RouteTargetOneOf3
    oneof_schema_4_validator: Optional[RouteTargetOneOf3] = None
    # data type: RouteTargetOneOf4
    oneof_schema_5_validator: Optional[RouteTargetOneOf4] = None
    # data type: RouteTargetOneOf5
    oneof_schema_6_validator: Optional[RouteTargetOneOf5] = None
    actual_instance: Optional[Union[RouteTargetOneOf, RouteTargetOneOf1, RouteTargetOneOf2, RouteTargetOneOf3, RouteTargetOneOf4, RouteTargetOneOf5]] = None
    one_of_schemas: Set[str] = { "RouteTargetOneOf", "RouteTargetOneOf1", "RouteTargetOneOf2", "RouteTargetOneOf3", "RouteTargetOneOf4", "RouteTargetOneOf5" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RouteTarget.model_construct()
        error_messages = []
        match = 0
        # validate data type: RouteTargetOneOf
        if not isinstance(v, RouteTargetOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RouteTargetOneOf`")
        else:
            match += 1
        # validate data type: RouteTargetOneOf1
        if not isinstance(v, RouteTargetOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RouteTargetOneOf1`")
        else:
            match += 1
        # validate data type: RouteTargetOneOf2
        if not isinstance(v, RouteTargetOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RouteTargetOneOf2`")
        else:
            match += 1
        # validate data type: RouteTargetOneOf3
        if not isinstance(v, RouteTargetOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RouteTargetOneOf3`")
        else:
            match += 1
        # validate data type: RouteTargetOneOf4
        if not isinstance(v, RouteTargetOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RouteTargetOneOf4`")
        else:
            match += 1
        # validate data type: RouteTargetOneOf5
        if not isinstance(v, RouteTargetOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RouteTargetOneOf5`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RouteTarget with oneOf schemas: RouteTargetOneOf, RouteTargetOneOf1, RouteTargetOneOf2, RouteTargetOneOf3, RouteTargetOneOf4, RouteTargetOneOf5. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RouteTarget with oneOf schemas: RouteTargetOneOf, RouteTargetOneOf1, RouteTargetOneOf2, RouteTargetOneOf3, RouteTargetOneOf4, RouteTargetOneOf5. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into RouteTargetOneOf
        try:
            instance.actual_instance = RouteTargetOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RouteTargetOneOf1
        try:
            instance.actual_instance = RouteTargetOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RouteTargetOneOf2
        try:
            instance.actual_instance = RouteTargetOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RouteTargetOneOf3
        try:
            instance.actual_instance = RouteTargetOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RouteTargetOneOf4
        try:
            instance.actual_instance = RouteTargetOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RouteTargetOneOf5
        try:
            instance.actual_instance = RouteTargetOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RouteTarget with oneOf schemas: RouteTargetOneOf, RouteTargetOneOf1, RouteTargetOneOf2, RouteTargetOneOf3, RouteTargetOneOf4, RouteTargetOneOf5. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RouteTarget with oneOf schemas: RouteTargetOneOf, RouteTargetOneOf1, RouteTargetOneOf2, RouteTargetOneOf3, RouteTargetOneOf4, RouteTargetOneOf5. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], RouteTargetOneOf, RouteTargetOneOf1, RouteTargetOneOf2, RouteTargetOneOf3, RouteTargetOneOf4, RouteTargetOneOf5]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


