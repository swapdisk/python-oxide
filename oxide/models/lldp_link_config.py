# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from oxide.models.ip_net import IpNet
from typing import Optional, Set
from typing_extensions import Self

class LldpLinkConfig(BaseModel):
    """
    A link layer discovery protocol (LLDP) service configuration.
    """ # noqa: E501
    chassis_id: Optional[StrictStr] = Field(default=None, description="The LLDP chassis identifier TLV.")
    enabled: StrictBool = Field(description="Whether or not the LLDP service is enabled.")
    id: StrictStr = Field(description="The id of this LLDP service instance.")
    link_description: Optional[StrictStr] = Field(default=None, description="The LLDP link description TLV.")
    link_name: Optional[StrictStr] = Field(default=None, description="The LLDP link name TLV.")
    management_ip: Optional[IpNet] = Field(default=None, description="The LLDP management IP TLV.")
    system_description: Optional[StrictStr] = Field(default=None, description="The LLDP system description TLV.")
    system_name: Optional[StrictStr] = Field(default=None, description="The LLDP system name TLV.")
    __properties: ClassVar[List[str]] = ["chassis_id", "enabled", "id", "link_description", "link_name", "management_ip", "system_description", "system_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LldpLinkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of management_ip
        if self.management_ip:
            _dict['management_ip'] = self.management_ip.to_dict()
        # set to None if chassis_id (nullable) is None
        # and model_fields_set contains the field
        if self.chassis_id is None and "chassis_id" in self.model_fields_set:
            _dict['chassis_id'] = None

        # set to None if link_description (nullable) is None
        # and model_fields_set contains the field
        if self.link_description is None and "link_description" in self.model_fields_set:
            _dict['link_description'] = None

        # set to None if link_name (nullable) is None
        # and model_fields_set contains the field
        if self.link_name is None and "link_name" in self.model_fields_set:
            _dict['link_name'] = None

        # set to None if management_ip (nullable) is None
        # and model_fields_set contains the field
        if self.management_ip is None and "management_ip" in self.model_fields_set:
            _dict['management_ip'] = None

        # set to None if system_description (nullable) is None
        # and model_fields_set contains the field
        if self.system_description is None and "system_description" in self.model_fields_set:
            _dict['system_description'] = None

        # set to None if system_name (nullable) is None
        # and model_fields_set contains the field
        if self.system_name is None and "system_name" in self.model_fields_set:
            _dict['system_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LldpLinkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chassis_id": obj.get("chassis_id"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "link_description": obj.get("link_description"),
            "link_name": obj.get("link_name"),
            "management_ip": IpNet.from_dict(obj["management_ip"]) if obj.get("management_ip") is not None else None,
            "system_description": obj.get("system_description"),
            "system_name": obj.get("system_name")
        })
        return _obj


