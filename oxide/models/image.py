# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from oxide.models.digest import Digest
from typing import Optional, Set
from typing_extensions import Self

class Image(BaseModel):
    """
    View of an image  If `project_id` is present then the image is only visible inside that project. If it's not present then the image is visible to all projects in the silo.
    """ # noqa: E501
    block_size: Annotated[int, Field(strict=True, ge=0)] = Field(description="size of blocks in bytes")
    description: StrictStr = Field(description="human-readable free-form text about a resource")
    digest: Optional[Digest] = Field(default=None, description="Hash of the image contents, if applicable")
    id: StrictStr = Field(description="unique, immutable, system-controlled identifier for each resource")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=63)] = Field(description="unique, mutable, user-controlled identifier for each resource")
    os: StrictStr = Field(description="The family of the operating system like Debian, Ubuntu, etc.")
    project_id: Optional[StrictStr] = Field(default=None, description="ID of the parent project if the image is a project image")
    size: Annotated[int, Field(strict=True, ge=0)] = Field(description="total size in bytes")
    time_created: datetime = Field(description="timestamp when this resource was created")
    time_modified: datetime = Field(description="timestamp when this resource was last modified")
    version: StrictStr = Field(description="Version of the operating system")
    __properties: ClassVar[List[str]] = ["block_size", "description", "digest", "id", "name", "os", "project_id", "size", "time_created", "time_modified", "version"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$", value):
            raise ValueError(r"must validate the regular expression /^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Image from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of digest
        if self.digest:
            _dict['digest'] = self.digest.to_dict()
        # set to None if digest (nullable) is None
        # and model_fields_set contains the field
        if self.digest is None and "digest" in self.model_fields_set:
            _dict['digest'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Image from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "block_size": obj.get("block_size"),
            "description": obj.get("description"),
            "digest": Digest.from_dict(obj["digest"]) if obj.get("digest") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "os": obj.get("os"),
            "project_id": obj.get("project_id"),
            "size": obj.get("size"),
            "time_created": obj.get("time_created"),
            "time_modified": obj.get("time_modified"),
            "version": obj.get("version")
        })
        return _obj


