# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Quantile(BaseModel):
    """
    Structure for estimating the p-quantile of a population.  This is based on the PÂ² algorithm for estimating quantiles using constant space.  The algorithm consists of maintaining five markers: the minimum, the p/2-, p-, and (1 + p)/2 quantiles, and the maximum.
    """ # noqa: E501
    desired_marker_positions: Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=5, max_length=5)] = Field(description="The desired marker positions.")
    marker_heights: Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=5, max_length=5)] = Field(description="The heights of the markers.")
    marker_positions: Annotated[List[Annotated[int, Field(strict=True, ge=0)]], Field(min_length=5, max_length=5)] = Field(description="The positions of the markers.  We track sample size in the 5th position, as useful observations won't start until we've filled the heights at the 6th sample anyway This does deviate from the paper, but it's a more useful representation that works according to the paper's algorithm.")
    p: Union[StrictFloat, StrictInt] = Field(description="The p value for the quantile.")
    __properties: ClassVar[List[str]] = ["desired_marker_positions", "marker_heights", "marker_positions", "p"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Quantile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Quantile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "desired_marker_positions": obj.get("desired_marker_positions"),
            "marker_heights": obj.get("marker_heights"),
            "marker_positions": obj.get("marker_positions"),
            "p": obj.get("p")
        })
        return _obj


