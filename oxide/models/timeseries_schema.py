# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from oxide.models.authz_scope import AuthzScope
from oxide.models.datum_type import DatumType
from oxide.models.field_schema import FieldSchema
from oxide.models.timeseries_description import TimeseriesDescription
from oxide.models.units import Units
from typing import Optional, Set
from typing_extensions import Self

class TimeseriesSchema(BaseModel):
    """
    The schema for a timeseries.  This includes the name of the timeseries, as well as the datum type of its metric and the schema for each field.
    """ # noqa: E501
    authz_scope: AuthzScope
    created: datetime
    datum_type: DatumType
    description: TimeseriesDescription
    field_schema: List[FieldSchema]
    timeseries_name: Annotated[str, Field(strict=True)] = Field(description="Names are constructed by concatenating the target and metric names with ':'. Target and metric names must be lowercase alphanumeric characters with '_' separating words.")
    units: Units
    version: Annotated[int, Field(strict=True, ge=1)]
    __properties: ClassVar[List[str]] = ["authz_scope", "created", "datum_type", "description", "field_schema", "timeseries_name", "units", "version"]

    @field_validator('timeseries_name')
    def timeseries_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*):(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*)$", value):
            raise ValueError(r"must validate the regular expression /^(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*):(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeseriesSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authz_scope
        if self.authz_scope:
            _dict['authz_scope'] = self.authz_scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in field_schema (list)
        _items = []
        if self.field_schema:
            for _item_field_schema in self.field_schema:
                if _item_field_schema:
                    _items.append(_item_field_schema.to_dict())
            _dict['field_schema'] = _items
        # override the default output from pydantic by calling `to_dict()` of units
        if self.units:
            _dict['units'] = self.units.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeseriesSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authz_scope": AuthzScope.from_dict(obj["authz_scope"]) if obj.get("authz_scope") is not None else None,
            "created": obj.get("created"),
            "datum_type": obj.get("datum_type"),
            "description": TimeseriesDescription.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "field_schema": [FieldSchema.from_dict(_item) for _item in obj["field_schema"]] if obj.get("field_schema") is not None else None,
            "timeseries_name": obj.get("timeseries_name"),
            "units": Units.from_dict(obj["units"]) if obj.get("units") is not None else None,
            "version": obj.get("version")
        })
        return _obj


