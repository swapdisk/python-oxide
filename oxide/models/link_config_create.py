# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from oxide.models.link_fec import LinkFec
from oxide.models.link_speed import LinkSpeed
from oxide.models.lldp_link_config_create import LldpLinkConfigCreate
from typing import Optional, Set
from typing_extensions import Self

class LinkConfigCreate(BaseModel):
    """
    Switch link configuration.
    """ # noqa: E501
    autoneg: StrictBool = Field(description="Whether or not to set autonegotiation")
    fec: LinkFec = Field(description="The forward error correction mode of the link.")
    lldp: LldpLinkConfigCreate = Field(description="The link-layer discovery protocol (LLDP) configuration for the link.")
    mtu: Annotated[int, Field(strict=True, ge=0)] = Field(description="Maximum transmission unit for the link.")
    speed: LinkSpeed = Field(description="The speed of the link.")
    __properties: ClassVar[List[str]] = ["autoneg", "fec", "lldp", "mtu", "speed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LinkConfigCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fec
        if self.fec:
            _dict['fec'] = self.fec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lldp
        if self.lldp:
            _dict['lldp'] = self.lldp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of speed
        if self.speed:
            _dict['speed'] = self.speed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LinkConfigCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoneg": obj.get("autoneg"),
            "fec": LinkFec.from_dict(obj["fec"]) if obj.get("fec") is not None else None,
            "lldp": LldpLinkConfigCreate.from_dict(obj["lldp"]) if obj.get("lldp") is not None else None,
            "mtu": obj.get("mtu"),
            "speed": LinkSpeed.from_dict(obj["speed"]) if obj.get("speed") is not None else None
        })
        return _obj


