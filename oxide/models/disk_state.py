# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from oxide.models.disk_state_one_of import DiskStateOneOf
from oxide.models.disk_state_one_of1 import DiskStateOneOf1
from oxide.models.disk_state_one_of10 import DiskStateOneOf10
from oxide.models.disk_state_one_of11 import DiskStateOneOf11
from oxide.models.disk_state_one_of2 import DiskStateOneOf2
from oxide.models.disk_state_one_of3 import DiskStateOneOf3
from oxide.models.disk_state_one_of4 import DiskStateOneOf4
from oxide.models.disk_state_one_of5 import DiskStateOneOf5
from oxide.models.disk_state_one_of6 import DiskStateOneOf6
from oxide.models.disk_state_one_of7 import DiskStateOneOf7
from oxide.models.disk_state_one_of8 import DiskStateOneOf8
from oxide.models.disk_state_one_of9 import DiskStateOneOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

DISKSTATE_ONE_OF_SCHEMAS = ["DiskStateOneOf", "DiskStateOneOf1", "DiskStateOneOf10", "DiskStateOneOf11", "DiskStateOneOf2", "DiskStateOneOf3", "DiskStateOneOf4", "DiskStateOneOf5", "DiskStateOneOf6", "DiskStateOneOf7", "DiskStateOneOf8", "DiskStateOneOf9"]

class DiskState(BaseModel):
    """
    State of a Disk
    """
    # data type: DiskStateOneOf
    oneof_schema_1_validator: Optional[DiskStateOneOf] = None
    # data type: DiskStateOneOf1
    oneof_schema_2_validator: Optional[DiskStateOneOf1] = None
    # data type: DiskStateOneOf2
    oneof_schema_3_validator: Optional[DiskStateOneOf2] = None
    # data type: DiskStateOneOf3
    oneof_schema_4_validator: Optional[DiskStateOneOf3] = None
    # data type: DiskStateOneOf4
    oneof_schema_5_validator: Optional[DiskStateOneOf4] = None
    # data type: DiskStateOneOf5
    oneof_schema_6_validator: Optional[DiskStateOneOf5] = None
    # data type: DiskStateOneOf6
    oneof_schema_7_validator: Optional[DiskStateOneOf6] = None
    # data type: DiskStateOneOf7
    oneof_schema_8_validator: Optional[DiskStateOneOf7] = None
    # data type: DiskStateOneOf8
    oneof_schema_9_validator: Optional[DiskStateOneOf8] = None
    # data type: DiskStateOneOf9
    oneof_schema_10_validator: Optional[DiskStateOneOf9] = None
    # data type: DiskStateOneOf10
    oneof_schema_11_validator: Optional[DiskStateOneOf10] = None
    # data type: DiskStateOneOf11
    oneof_schema_12_validator: Optional[DiskStateOneOf11] = None
    actual_instance: Optional[Union[DiskStateOneOf, DiskStateOneOf1, DiskStateOneOf10, DiskStateOneOf11, DiskStateOneOf2, DiskStateOneOf3, DiskStateOneOf4, DiskStateOneOf5, DiskStateOneOf6, DiskStateOneOf7, DiskStateOneOf8, DiskStateOneOf9]] = None
    one_of_schemas: Set[str] = { "DiskStateOneOf", "DiskStateOneOf1", "DiskStateOneOf10", "DiskStateOneOf11", "DiskStateOneOf2", "DiskStateOneOf3", "DiskStateOneOf4", "DiskStateOneOf5", "DiskStateOneOf6", "DiskStateOneOf7", "DiskStateOneOf8", "DiskStateOneOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = DiskState.model_construct()
        error_messages = []
        match = 0
        # validate data type: DiskStateOneOf
        if not isinstance(v, DiskStateOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf`")
        else:
            match += 1
        # validate data type: DiskStateOneOf1
        if not isinstance(v, DiskStateOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf1`")
        else:
            match += 1
        # validate data type: DiskStateOneOf2
        if not isinstance(v, DiskStateOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf2`")
        else:
            match += 1
        # validate data type: DiskStateOneOf3
        if not isinstance(v, DiskStateOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf3`")
        else:
            match += 1
        # validate data type: DiskStateOneOf4
        if not isinstance(v, DiskStateOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf4`")
        else:
            match += 1
        # validate data type: DiskStateOneOf5
        if not isinstance(v, DiskStateOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf5`")
        else:
            match += 1
        # validate data type: DiskStateOneOf6
        if not isinstance(v, DiskStateOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf6`")
        else:
            match += 1
        # validate data type: DiskStateOneOf7
        if not isinstance(v, DiskStateOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf7`")
        else:
            match += 1
        # validate data type: DiskStateOneOf8
        if not isinstance(v, DiskStateOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf8`")
        else:
            match += 1
        # validate data type: DiskStateOneOf9
        if not isinstance(v, DiskStateOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf9`")
        else:
            match += 1
        # validate data type: DiskStateOneOf10
        if not isinstance(v, DiskStateOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf10`")
        else:
            match += 1
        # validate data type: DiskStateOneOf11
        if not isinstance(v, DiskStateOneOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DiskStateOneOf11`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in DiskState with oneOf schemas: DiskStateOneOf, DiskStateOneOf1, DiskStateOneOf10, DiskStateOneOf11, DiskStateOneOf2, DiskStateOneOf3, DiskStateOneOf4, DiskStateOneOf5, DiskStateOneOf6, DiskStateOneOf7, DiskStateOneOf8, DiskStateOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in DiskState with oneOf schemas: DiskStateOneOf, DiskStateOneOf1, DiskStateOneOf10, DiskStateOneOf11, DiskStateOneOf2, DiskStateOneOf3, DiskStateOneOf4, DiskStateOneOf5, DiskStateOneOf6, DiskStateOneOf7, DiskStateOneOf8, DiskStateOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DiskStateOneOf
        try:
            instance.actual_instance = DiskStateOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf1
        try:
            instance.actual_instance = DiskStateOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf2
        try:
            instance.actual_instance = DiskStateOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf3
        try:
            instance.actual_instance = DiskStateOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf4
        try:
            instance.actual_instance = DiskStateOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf5
        try:
            instance.actual_instance = DiskStateOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf6
        try:
            instance.actual_instance = DiskStateOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf7
        try:
            instance.actual_instance = DiskStateOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf8
        try:
            instance.actual_instance = DiskStateOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf9
        try:
            instance.actual_instance = DiskStateOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf10
        try:
            instance.actual_instance = DiskStateOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DiskStateOneOf11
        try:
            instance.actual_instance = DiskStateOneOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into DiskState with oneOf schemas: DiskStateOneOf, DiskStateOneOf1, DiskStateOneOf10, DiskStateOneOf11, DiskStateOneOf2, DiskStateOneOf3, DiskStateOneOf4, DiskStateOneOf5, DiskStateOneOf6, DiskStateOneOf7, DiskStateOneOf8, DiskStateOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DiskState with oneOf schemas: DiskStateOneOf, DiskStateOneOf1, DiskStateOneOf10, DiskStateOneOf11, DiskStateOneOf2, DiskStateOneOf3, DiskStateOneOf4, DiskStateOneOf5, DiskStateOneOf6, DiskStateOneOf7, DiskStateOneOf8, DiskStateOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DiskStateOneOf, DiskStateOneOf1, DiskStateOneOf10, DiskStateOneOf11, DiskStateOneOf2, DiskStateOneOf3, DiskStateOneOf4, DiskStateOneOf5, DiskStateOneOf6, DiskStateOneOf7, DiskStateOneOf8, DiskStateOneOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


