# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from oxide.models.ip_net import IpNet
from typing import Optional, Set
from typing_extensions import Self

class Route(BaseModel):
    """
    A route to a destination network through a gateway address.
    """ # noqa: E501
    dst: IpNet = Field(description="The route destination.")
    gw: StrictStr = Field(description="The route gateway.")
    local_pref: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Local preference for route. Higher preference indictes precedence within and across protocols.")
    vid: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="VLAN id the gateway is reachable over.")
    __properties: ClassVar[List[str]] = ["dst", "gw", "local_pref", "vid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Route from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dst
        if self.dst:
            _dict['dst'] = self.dst.to_dict()
        # set to None if local_pref (nullable) is None
        # and model_fields_set contains the field
        if self.local_pref is None and "local_pref" in self.model_fields_set:
            _dict['local_pref'] = None

        # set to None if vid (nullable) is None
        # and model_fields_set contains the field
        if self.vid is None and "vid" in self.model_fields_set:
            _dict['vid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Route from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dst": IpNet.from_dict(obj["dst"]) if obj.get("dst") is not None else None,
            "gw": obj.get("gw"),
            "local_pref": obj.get("local_pref"),
            "vid": obj.get("vid")
        })
        return _obj


