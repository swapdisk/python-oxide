# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from oxide.models.baseboard import Baseboard
from typing import Optional, Set
from typing_extensions import Self

class Switch(BaseModel):
    """
    An operator's view of a Switch.
    """ # noqa: E501
    baseboard: Baseboard
    id: StrictStr = Field(description="unique, immutable, system-controlled identifier for each resource")
    rack_id: StrictStr = Field(description="The rack to which this Switch is currently attached")
    time_created: datetime = Field(description="timestamp when this resource was created")
    time_modified: datetime = Field(description="timestamp when this resource was last modified")
    __properties: ClassVar[List[str]] = ["baseboard", "id", "rack_id", "time_created", "time_modified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Switch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of baseboard
        if self.baseboard:
            _dict['baseboard'] = self.baseboard.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Switch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseboard": Baseboard.from_dict(obj["baseboard"]) if obj.get("baseboard") is not None else None,
            "id": obj.get("id"),
            "rack_id": obj.get("rack_id"),
            "time_created": obj.get("time_created"),
            "time_modified": obj.get("time_modified")
        })
        return _obj


