# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from oxide.models.address_config import AddressConfig
from oxide.models.bgp_peer_config import BgpPeerConfig
from oxide.models.link_config_create import LinkConfigCreate
from oxide.models.name_or_id import NameOrId
from oxide.models.route_config import RouteConfig
from oxide.models.switch_interface_config_create import SwitchInterfaceConfigCreate
from oxide.models.switch_port_config_create import SwitchPortConfigCreate
from typing import Optional, Set
from typing_extensions import Self

class SwitchPortSettingsCreate(BaseModel):
    """
    Parameters for creating switch port settings. Switch port settings are the central data structure for setting up external networking. Switch port settings include link, interface, route, address and dynamic network protocol configuration.
    """ # noqa: E501
    addresses: Dict[str, AddressConfig] = Field(description="Addresses indexed by interface name.")
    bgp_peers: Dict[str, BgpPeerConfig] = Field(description="BGP peers indexed by interface name.")
    description: StrictStr
    groups: List[NameOrId]
    interfaces: Dict[str, SwitchInterfaceConfigCreate] = Field(description="Interfaces indexed by link name.")
    links: Dict[str, LinkConfigCreate] = Field(description="Links indexed by phy name. On ports that are not broken out, this is always phy0. On a 2x breakout the options are phy0 and phy1, on 4x phy0-phy3, etc.")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=63)] = Field(description="Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'. Names cannot be a UUID, but they may contain a UUID. They can be at most 63 characters long.")
    port_config: SwitchPortConfigCreate
    routes: Dict[str, RouteConfig] = Field(description="Routes indexed by interface name.")
    __properties: ClassVar[List[str]] = ["addresses", "bgp_peers", "description", "groups", "interfaces", "links", "name", "port_config", "routes"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$", value):
            raise ValueError(r"must validate the regular expression /^(?![0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$)^[a-z]([a-zA-Z0-9-]*[a-zA-Z0-9]+)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SwitchPortSettingsCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in addresses (dict)
        _field_dict = {}
        if self.addresses:
            for _key_addresses in self.addresses:
                if self.addresses[_key_addresses]:
                    _field_dict[_key_addresses] = self.addresses[_key_addresses].to_dict()
            _dict['addresses'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in bgp_peers (dict)
        _field_dict = {}
        if self.bgp_peers:
            for _key_bgp_peers in self.bgp_peers:
                if self.bgp_peers[_key_bgp_peers]:
                    _field_dict[_key_bgp_peers] = self.bgp_peers[_key_bgp_peers].to_dict()
            _dict['bgp_peers'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in interfaces (dict)
        _field_dict = {}
        if self.interfaces:
            for _key_interfaces in self.interfaces:
                if self.interfaces[_key_interfaces]:
                    _field_dict[_key_interfaces] = self.interfaces[_key_interfaces].to_dict()
            _dict['interfaces'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key_links in self.links:
                if self.links[_key_links]:
                    _field_dict[_key_links] = self.links[_key_links].to_dict()
            _dict['links'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of port_config
        if self.port_config:
            _dict['port_config'] = self.port_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in routes (dict)
        _field_dict = {}
        if self.routes:
            for _key_routes in self.routes:
                if self.routes[_key_routes]:
                    _field_dict[_key_routes] = self.routes[_key_routes].to_dict()
            _dict['routes'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SwitchPortSettingsCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addresses": dict(
                (_k, AddressConfig.from_dict(_v))
                for _k, _v in obj["addresses"].items()
            )
            if obj.get("addresses") is not None
            else None,
            "bgp_peers": dict(
                (_k, BgpPeerConfig.from_dict(_v))
                for _k, _v in obj["bgp_peers"].items()
            )
            if obj.get("bgp_peers") is not None
            else None,
            "description": obj.get("description"),
            "groups": [NameOrId.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "interfaces": dict(
                (_k, SwitchInterfaceConfigCreate.from_dict(_v))
                for _k, _v in obj["interfaces"].items()
            )
            if obj.get("interfaces") is not None
            else None,
            "links": dict(
                (_k, LinkConfigCreate.from_dict(_v))
                for _k, _v in obj["links"].items()
            )
            if obj.get("links") is not None
            else None,
            "name": obj.get("name"),
            "port_config": SwitchPortConfigCreate.from_dict(obj["port_config"]) if obj.get("port_config") is not None else None,
            "routes": dict(
                (_k, RouteConfig.from_dict(_v))
                for _k, _v in obj["routes"].items()
            )
            if obj.get("routes") is not None
            else None
        })
        return _obj


