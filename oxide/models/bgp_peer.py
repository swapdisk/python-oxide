# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from oxide.models.import_export_policy import ImportExportPolicy
from oxide.models.name_or_id import NameOrId
from typing import Optional, Set
from typing_extensions import Self

class BgpPeer(BaseModel):
    """
    A BGP peer configuration for an interface. Includes the set of announcements that will be advertised to the peer identified by `addr`. The `bgp_config` parameter is a reference to global BGP parameters. The `interface_name` indicates what interface the peer should be contacted on.
    """ # noqa: E501
    addr: StrictStr = Field(description="The address of the host to peer with.")
    allowed_export: ImportExportPolicy = Field(description="Define export policy for a peer.")
    allowed_import: ImportExportPolicy = Field(description="Define import policy for a peer.")
    bgp_config: NameOrId = Field(description="The global BGP configuration used for establishing a session with this peer.")
    communities: List[Annotated[int, Field(strict=True, ge=0)]] = Field(description="Include the provided communities in updates sent to the peer.")
    connect_retry: Annotated[int, Field(strict=True, ge=0)] = Field(description="How long to to wait between TCP connection retries (seconds).")
    delay_open: Annotated[int, Field(strict=True, ge=0)] = Field(description="How long to delay sending an open request after establishing a TCP session (seconds).")
    enforce_first_as: StrictBool = Field(description="Enforce that the first AS in paths received from this peer is the peer's AS.")
    hold_time: Annotated[int, Field(strict=True, ge=0)] = Field(description="How long to hold peer connections between keepalives (seconds).")
    idle_hold_time: Annotated[int, Field(strict=True, ge=0)] = Field(description="How long to hold a peer in idle before attempting a new session (seconds).")
    interface_name: StrictStr = Field(description="The name of interface to peer on. This is relative to the port configuration this BGP peer configuration is a part of. For example this value could be phy0 to refer to a primary physical interface. Or it could be vlan47 to refer to a VLAN interface.")
    keepalive: Annotated[int, Field(strict=True, ge=0)] = Field(description="How often to send keepalive requests (seconds).")
    local_pref: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Apply a local preference to routes received from this peer.")
    md5_auth_key: Optional[StrictStr] = Field(default=None, description="Use the given key for TCP-MD5 authentication with the peer.")
    min_ttl: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Require messages from a peer have a minimum IP time to live field.")
    multi_exit_discriminator: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Apply the provided multi-exit discriminator (MED) updates sent to the peer.")
    remote_asn: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Require that a peer has a specified ASN.")
    vlan_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Associate a VLAN ID with a peer.")
    __properties: ClassVar[List[str]] = ["addr", "allowed_export", "allowed_import", "bgp_config", "communities", "connect_retry", "delay_open", "enforce_first_as", "hold_time", "idle_hold_time", "interface_name", "keepalive", "local_pref", "md5_auth_key", "min_ttl", "multi_exit_discriminator", "remote_asn", "vlan_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BgpPeer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allowed_export
        if self.allowed_export:
            _dict['allowed_export'] = self.allowed_export.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allowed_import
        if self.allowed_import:
            _dict['allowed_import'] = self.allowed_import.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bgp_config
        if self.bgp_config:
            _dict['bgp_config'] = self.bgp_config.to_dict()
        # set to None if local_pref (nullable) is None
        # and model_fields_set contains the field
        if self.local_pref is None and "local_pref" in self.model_fields_set:
            _dict['local_pref'] = None

        # set to None if md5_auth_key (nullable) is None
        # and model_fields_set contains the field
        if self.md5_auth_key is None and "md5_auth_key" in self.model_fields_set:
            _dict['md5_auth_key'] = None

        # set to None if min_ttl (nullable) is None
        # and model_fields_set contains the field
        if self.min_ttl is None and "min_ttl" in self.model_fields_set:
            _dict['min_ttl'] = None

        # set to None if multi_exit_discriminator (nullable) is None
        # and model_fields_set contains the field
        if self.multi_exit_discriminator is None and "multi_exit_discriminator" in self.model_fields_set:
            _dict['multi_exit_discriminator'] = None

        # set to None if remote_asn (nullable) is None
        # and model_fields_set contains the field
        if self.remote_asn is None and "remote_asn" in self.model_fields_set:
            _dict['remote_asn'] = None

        # set to None if vlan_id (nullable) is None
        # and model_fields_set contains the field
        if self.vlan_id is None and "vlan_id" in self.model_fields_set:
            _dict['vlan_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BgpPeer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addr": obj.get("addr"),
            "allowed_export": ImportExportPolicy.from_dict(obj["allowed_export"]) if obj.get("allowed_export") is not None else None,
            "allowed_import": ImportExportPolicy.from_dict(obj["allowed_import"]) if obj.get("allowed_import") is not None else None,
            "bgp_config": NameOrId.from_dict(obj["bgp_config"]) if obj.get("bgp_config") is not None else None,
            "communities": obj.get("communities"),
            "connect_retry": obj.get("connect_retry"),
            "delay_open": obj.get("delay_open"),
            "enforce_first_as": obj.get("enforce_first_as"),
            "hold_time": obj.get("hold_time"),
            "idle_hold_time": obj.get("idle_hold_time"),
            "interface_name": obj.get("interface_name"),
            "keepalive": obj.get("keepalive"),
            "local_pref": obj.get("local_pref"),
            "md5_auth_key": obj.get("md5_auth_key"),
            "min_ttl": obj.get("min_ttl"),
            "multi_exit_discriminator": obj.get("multi_exit_discriminator"),
            "remote_asn": obj.get("remote_asn"),
            "vlan_id": obj.get("vlan_id")
        })
        return _obj


