# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from oxide.models.vpc_firewall_rule_host_filter import VpcFirewallRuleHostFilter
from oxide.models.vpc_firewall_rule_protocol import VpcFirewallRuleProtocol
from typing import Optional, Set
from typing_extensions import Self

class VpcFirewallRuleFilter(BaseModel):
    """
    Filters reduce the scope of a firewall rule. Without filters, the rule applies to all packets to the targets (or from the targets, if it's an outbound rule). With multiple filters, the rule applies only to packets matching ALL filters. The maximum number of each type of filter is 256.
    """ # noqa: E501
    hosts: Optional[Annotated[List[VpcFirewallRuleHostFilter], Field(max_length=256)]] = Field(default=None, description="If present, host filters match the \"other end\" of traffic from the targetâ€™s perspective: for an inbound rule, they match the source of traffic. For an outbound rule, they match the destination.")
    ports: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=11)]], Field(max_length=256)]] = Field(default=None, description="If present, the destination ports or port ranges this rule applies to.")
    protocols: Optional[Annotated[List[VpcFirewallRuleProtocol], Field(max_length=256)]] = Field(default=None, description="If present, the networking protocols this rule applies to.")
    __properties: ClassVar[List[str]] = ["hosts", "ports", "protocols"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VpcFirewallRuleFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hosts (list)
        _items = []
        if self.hosts:
            for _item_hosts in self.hosts:
                if _item_hosts:
                    _items.append(_item_hosts.to_dict())
            _dict['hosts'] = _items
        # set to None if hosts (nullable) is None
        # and model_fields_set contains the field
        if self.hosts is None and "hosts" in self.model_fields_set:
            _dict['hosts'] = None

        # set to None if ports (nullable) is None
        # and model_fields_set contains the field
        if self.ports is None and "ports" in self.model_fields_set:
            _dict['ports'] = None

        # set to None if protocols (nullable) is None
        # and model_fields_set contains the field
        if self.protocols is None and "protocols" in self.model_fields_set:
            _dict['protocols'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VpcFirewallRuleFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hosts": [VpcFirewallRuleHostFilter.from_dict(_item) for _item in obj["hosts"]] if obj.get("hosts") is not None else None,
            "ports": obj.get("ports"),
            "protocols": obj.get("protocols")
        })
        return _obj


