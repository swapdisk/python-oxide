# coding: utf-8

"""
    Oxide Region API

    API for interacting with the Oxide control plane

    The version of the OpenAPI document: 20240821.0
    Contact: api@oxide.computer
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import Any, Optional
from typing_extensions import Annotated
from oxide.models.measurement_results_page import MeasurementResultsPage
from oxide.models.pagination_order import PaginationOrder
from oxide.models.system_metric_name import SystemMetricName

from oxide.api_client import ApiClient, RequestSerialized
from oxide.api_response import ApiResponse
from oxide.rest import RESTResponseType


class SystemMetricsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def system_metric(
        self,
        metric_name: SystemMetricName,
        end_time: Annotated[Optional[datetime], Field(description="An exclusive end time of metrics.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Maximum number of items returned by a single call")] = None,
        order: Annotated[Optional[PaginationOrder], Field(description="Query result order")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Token returned by previous call to retrieve the subsequent page")] = None,
        start_time: Annotated[Optional[datetime], Field(description="An inclusive start time of metrics.")] = None,
        silo: Annotated[Optional[Any], Field(description="Name or ID of the silo")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MeasurementResultsPage:
        """View metrics

        View CPU, memory, or storage utilization metrics at the fleet or silo level.

        :param metric_name: (required)
        :type metric_name: SystemMetricName
        :param end_time: An exclusive end time of metrics.
        :type end_time: datetime
        :param limit: Maximum number of items returned by a single call
        :type limit: int
        :param order: Query result order
        :type order: PaginationOrder
        :param page_token: Token returned by previous call to retrieve the subsequent page
        :type page_token: str
        :param start_time: An inclusive start time of metrics.
        :type start_time: datetime
        :param silo: Name or ID of the silo
        :type silo: NameOrId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._system_metric_serialize(
            metric_name=metric_name,
            end_time=end_time,
            limit=limit,
            order=order,
            page_token=page_token,
            start_time=start_time,
            silo=silo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MeasurementResultsPage",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def system_metric_with_http_info(
        self,
        metric_name: SystemMetricName,
        end_time: Annotated[Optional[datetime], Field(description="An exclusive end time of metrics.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Maximum number of items returned by a single call")] = None,
        order: Annotated[Optional[PaginationOrder], Field(description="Query result order")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Token returned by previous call to retrieve the subsequent page")] = None,
        start_time: Annotated[Optional[datetime], Field(description="An inclusive start time of metrics.")] = None,
        silo: Annotated[Optional[Any], Field(description="Name or ID of the silo")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MeasurementResultsPage]:
        """View metrics

        View CPU, memory, or storage utilization metrics at the fleet or silo level.

        :param metric_name: (required)
        :type metric_name: SystemMetricName
        :param end_time: An exclusive end time of metrics.
        :type end_time: datetime
        :param limit: Maximum number of items returned by a single call
        :type limit: int
        :param order: Query result order
        :type order: PaginationOrder
        :param page_token: Token returned by previous call to retrieve the subsequent page
        :type page_token: str
        :param start_time: An inclusive start time of metrics.
        :type start_time: datetime
        :param silo: Name or ID of the silo
        :type silo: NameOrId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._system_metric_serialize(
            metric_name=metric_name,
            end_time=end_time,
            limit=limit,
            order=order,
            page_token=page_token,
            start_time=start_time,
            silo=silo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MeasurementResultsPage",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def system_metric_without_preload_content(
        self,
        metric_name: SystemMetricName,
        end_time: Annotated[Optional[datetime], Field(description="An exclusive end time of metrics.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Maximum number of items returned by a single call")] = None,
        order: Annotated[Optional[PaginationOrder], Field(description="Query result order")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Token returned by previous call to retrieve the subsequent page")] = None,
        start_time: Annotated[Optional[datetime], Field(description="An inclusive start time of metrics.")] = None,
        silo: Annotated[Optional[Any], Field(description="Name or ID of the silo")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """View metrics

        View CPU, memory, or storage utilization metrics at the fleet or silo level.

        :param metric_name: (required)
        :type metric_name: SystemMetricName
        :param end_time: An exclusive end time of metrics.
        :type end_time: datetime
        :param limit: Maximum number of items returned by a single call
        :type limit: int
        :param order: Query result order
        :type order: PaginationOrder
        :param page_token: Token returned by previous call to retrieve the subsequent page
        :type page_token: str
        :param start_time: An inclusive start time of metrics.
        :type start_time: datetime
        :param silo: Name or ID of the silo
        :type silo: NameOrId
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._system_metric_serialize(
            metric_name=metric_name,
            end_time=end_time,
            limit=limit,
            order=order,
            page_token=page_token,
            start_time=start_time,
            silo=silo,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MeasurementResultsPage",
            '4XX': "Error",
            '5XX': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _system_metric_serialize(
        self,
        metric_name,
        end_time,
        limit,
        order,
        page_token,
        start_time,
        silo,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if metric_name is not None:
            _path_params['metric_name'] = metric_name.value
        # process the query parameters
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'end_time',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end_time', end_time))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if order is not None:
            
            _query_params.append(('order', order.value))
            
        if page_token is not None:
            
            _query_params.append(('page_token', page_token))
            
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'start_time',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start_time', start_time))
            
        if silo is not None:
            
            _query_params.append(('silo', silo))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/system/metrics/{metric_name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


